<?php

namespace SecurePay\XMLAPI\Requests\Periodic\PeriodicItem;

use SecurePay\XMLAPI\Requests\RequestTraits\CreditCardTraits;
use SecurePay\XMLAPI\Requests\RequestTraits\DirectEntryTraits;
use SecurePay\XMLAPI\Utils\Validation;

/**
 * Add a Payor ID to SecurePay's database.
 *
 * Allows you to store a set of customer details, either Card or Bank details in the SecurePay database against a unique reference generated by the merchant.
 * Once stored in the database the merchant can trigger a transaction against the stored details at any time.
 *
 * Class AddPayorPeriodic
 * @author Beng Lim <benglim92@gmail.com>
 * @package SecurePay\XMLAPI\Requests\Periodic\PeriodicItem
 */
class AddPayorPeriodic extends Periodic
{
    use CreditCardTraits;
    use DirectEntryTraits;

    /**
     * @var string The payor's reference number.
     */
    private $clientId;

    /**
     * @var string The amount to process the transaction for in cents value.
     */
    protected $amount;

    /**
     * @var bool Should be to determine whether the credit card number should be used (true - credit card, false - direct entry)
     */
    private $useCreditCard;

    public function __construct()
    {
        parent::__construct();
        $this->useCreditCard = true;
    }

    /**
     * Returns The amount to process the transaction for in cents value.
     *
     * @return string the transaction amount
     */
    public function getAmount()
    {
        return $this->amount;
    }

    /**
     * Returns whether we should use credit card details or direct entry details. (true - credit card, false - direct entry)
     *
     * @return boolean Use credit card
     */
    public function isUseCreditCard()
    {
        return $this->useCreditCard;
    }

    /**
     * Sets whether we should use the credit card details or direct entry details. (true - credit card, false - direct entry)
     *
     * @param boolean $useCreditCard Use credit card
     * @return $this
     */
    public function setUseCreditCard($useCreditCard)
    {
        $this->useCreditCard = $useCreditCard;
        return $this;
    }

    /**
     * Sets the amount to process the transaction for.
     *
     * @throws \InvalidArgumentException When the amount is invalid.
     * @param string $amount The transaction amount
     * @return $this
     */
    public function setAmount($amount)
    {
        try {
            $this->amount = Validation::getProperAmount($amount);
            return $this;
        } catch (\InvalidArgumentException $iae) {
            throw $iae; // rethrow the exception to handle further up in the stack.
        }
    }

    /**
     * Returns the payor's client Id which is used as a reference to trigger a payment
     *
     * @return string The payor's client Id
     */
    public function getClientId()
    {
        return $this->clientId;
    }

    /**
     * Sets the payor's client Id
     *
     * @param $clientId The payor's client Id
     * @return $this
     */
    public function setClientId($clientId)
    {
        $this->clientId = $clientId;
        return $this;
    }

    protected function periodicItemReady()
    {
        if ($this->getAmount() == null) {
            return false;
        }
        $accountTypeToCharge = $this->determineAccountType();
        if ($accountTypeToCharge === parent::ACCOUNT_TYPE_CREDIT_CARD) {
            if ($this->expiryMonth == null ||
                $this->expiryYear == null ||
                $this->creditCardNo == null) {
                return false;
            }
        } else if ($accountTypeToCharge === parent::ACCOUNT_TYPE_DIRECT_ENTRY) {
            if ($this->getAccountName() == null ||
                $this->getBsbNumber() == null ||
                $this->getAccountNumber() == null) {
                return false;
            }
        } else if ($accountTypeToCharge === parent::ACCOUNT_TYPE_UNIDENTIFIED) {
            return false;
        }
        return true;
    }

    protected function getPeriodicItemType()
    {
        return "add";
    }

    public function generateRequestObject()
    {
        $txnObj = ["actionType" => $this->getPeriodicItemType(),
            "clientID" => $this->getClientId(),
            "amount" => $this->getAmount(),
            "periodicType" => "4", // value for adding payor.
            $this->generateCreditCardInfo(),
            $this->generateDirectEntryInfo()];
        return $txnObj;
    }
}